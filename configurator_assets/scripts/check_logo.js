const puppeteer = require('puppeteer');

async function checkLogo() {
    console.log('=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ—Ç–∏–ø–∞ DOMIO ===');
    
    const browser = await puppeteer.launch({ 
        headless: true,
        args: ['--no-sandbox', '--disable-setuid-sandbox']
    });
    
    try {
        const page = await browser.newPage();
        
        console.log('–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...');
        await page.goto('http://localhost:8000/configurator_2508f3617e1046cba5b985f3a7ea393a_page.html', {
            waitUntil: 'domcontentloaded',
            timeout: 30000
        });
        
        // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏
        await page.waitForTimeout(3000);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–æ—Ç–∏–ø –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
        const headerLogo = await page.evaluate(() => {
            const logo = document.querySelector('.logo img');
            if (logo) {
                return {
                    src: logo.src,
                    alt: logo.alt,
                    width: logo.width,
                    height: logo.height
                };
            }
            return null;
        });
        
        console.log('\nüìã –õ–æ–≥–æ—Ç–∏–ø –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ:');
        if (headerLogo) {
            console.log(`   Src: ${headerLogo.src}`);
            console.log(`   Alt: ${headerLogo.alt}`);
            console.log(`   –†–∞–∑–º–µ—Ä: ${headerLogo.width}x${headerLogo.height}`);
        } else {
            console.log('   ‚ùå –õ–æ–≥–æ—Ç–∏–ø –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–æ—Ç–∏–ø –≤ —Ñ—É—Ç–µ—Ä–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä–∞
        const footerLogo = await page.evaluate(() => {
            const logo = document.querySelector('.configurator-footer .logo img');
            if (logo) {
                return {
                    src: logo.src,
                    alt: logo.alt
                };
            }
            return null;
        });
        
        console.log('\nüìã –õ–æ–≥–æ—Ç–∏–ø –≤ —Ñ—É—Ç–µ—Ä–µ:');
        if (footerLogo) {
            console.log(`   Src: ${footerLogo.src}`);
            console.log(`   Alt: ${footerLogo.alt}`);
        } else {
            console.log('   ‚ùå –õ–æ–≥–æ—Ç–∏–ø –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        const metadata = await page.evaluate(() => {
            return {
                title: document.title,
                appName: document.querySelector('meta[name="application-name"]')?.content,
                appleAppName: document.querySelector('meta[name="apple-mobile-web-app-title"]')?.content
            };
        });
        
        console.log('\nüìã –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:');
        console.log(`   Title: ${metadata.title}`);
        console.log(`   App Name: ${metadata.appName}`);
        console.log(`   Apple App Name: ${metadata.appleAppName}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º JSON-LD
        const jsonLd = await page.evaluate(() => {
            const script = document.querySelector('script[type="application/ld+json"]');
            if (script) {
                try {
                    const data = JSON.parse(script.textContent);
                    const store = data['@graph']?.find(item => item['@type'] === 'FurnitureStore');
                    if (store) {
                        return {
                            name: store.name,
                            legalName: store.legalName,
                            logo: store.logo,
                            brand: store.brand?.name,
                            priceRange: store.priceRange
                        };
                    }
                } catch (e) {
                    console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON-LD:', e);
                }
            }
            return null;
        });
        
        console.log('\nüìã JSON-LD –¥–∞–Ω–Ω—ã–µ:');
        if (jsonLd) {
            console.log(`   Name: ${jsonLd.name}`);
            console.log(`   Legal Name: ${jsonLd.legalName}`);
            console.log(`   Logo: ${jsonLd.logo}`);
            console.log(`   Brand: ${jsonLd.brand}`);
            console.log(`   Price Range: ${jsonLd.priceRange}`);
        } else {
            console.log('   ‚ùå JSON-LD –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }
        
        console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error.message);
    } finally {
        await browser.close();
    }
}

checkLogo().catch(console.error);




