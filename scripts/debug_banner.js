const puppeteer = require('puppeteer');

async function debugSpecialOfferBlock() {
    console.log('=== –û—Ç–ª–∞–¥–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–≥–æ –±–ª–æ–∫–∞ –æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ ===');
    
    const browser = await puppeteer.launch({ 
        headless: false, // –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –≤–∏–¥–∏–º–æ–º —Ä–µ–∂–∏–º–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        args: ['--no-sandbox', '--disable-setuid-sandbox']
    });
    
    try {
        const page = await browser.newPage();
        
        // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –∫–æ–Ω—Å–æ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        page.on('console', msg => {
            if (msg.text().includes('banner') || msg.text().includes('voucher') || msg.text().includes('special')) {
                console.log('Console:', msg.text());
            }
        });
        
        console.log('–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...');
        await page.goto('http://localhost:8000/configurator_2508f3617e1046cba5b985f3a7ea393a_page.html', {
            waitUntil: 'domcontentloaded',
            timeout: 30000
        });
        
        // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏
        await page.waitForTimeout(5000);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –∫–ª–∞—Å—Å–æ–º banner
        const bannerElements = await page.evaluate(() => {
            const banners = document.querySelectorAll('[class*="banner"]');
            const results = [];
            
            banners.forEach((banner, index) => {
                results.push({
                    index: index,
                    className: banner.className,
                    text: banner.textContent.trim().substring(0, 100),
                    visible: banner.offsetParent !== null,
                    style: banner.style.cssText,
                    computedStyle: window.getComputedStyle(banner).display
                });
            });
            
            return results;
        });
        
        console.log('\nüìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –∫–ª–∞—Å—Å–æ–º banner:');
        if (bannerElements.length > 0) {
            bannerElements.forEach(banner => {
                console.log(`   ${banner.index + 1}. –ö–ª–∞—Å—Å: ${banner.className}`);
                console.log(`      –í–∏–¥–∏–º—ã–π: ${banner.visible}`);
                console.log(`      Display: ${banner.computedStyle}`);
                console.log(`      –¢–µ–∫—Å—Ç: ${banner.text}`);
                console.log('');
            });
        } else {
            console.log('   ‚ùå –≠–ª–µ–º–µ–Ω—Ç—ã —Å –∫–ª–∞—Å—Å–æ–º banner –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –∫–ª–∞—Å—Å–æ–º info-bar
        const infoBarElements = await page.evaluate(() => {
            const infoBars = document.querySelectorAll('[class*="info-bar"]');
            const results = [];
            
            infoBars.forEach((infoBar, index) => {
                results.push({
                    index: index,
                    className: infoBar.className,
                    text: infoBar.textContent.trim().substring(0, 100),
                    visible: infoBar.offsetParent !== null,
                    style: infoBar.style.cssText,
                    computedStyle: window.getComputedStyle(infoBar).display
                });
            });
            
            return results;
        });
        
        console.log('\nüìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –∫–ª–∞—Å—Å–æ–º info-bar:');
        if (infoBarElements.length > 0) {
            infoBarElements.forEach(infoBar => {
                console.log(`   ${infoBar.index + 1}. –ö–ª–∞—Å—Å: ${infoBar.className}`);
                console.log(`      –í–∏–¥–∏–º—ã–π: ${infoBar.visible}`);
                console.log(`      Display: ${banner.computedStyle}`);
                console.log(`      –¢–µ–∫—Å—Ç: ${infoBar.text}`);
                console.log('');
            });
        } else {
            console.log('   ‚ùå –≠–ª–µ–º–µ–Ω—Ç—ã —Å –∫–ª–∞—Å—Å–æ–º info-bar –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º JavaScript –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        const jsVars = await page.evaluate(() => {
            return {
                bannerInfoBar: window.bannerInfoBar ? 'exists' : 'not found',
                bannerVoucher: window.bannerVoucher ? 'exists' : 'not found',
                bannerInfoBarText: window.bannerInfoBar?.text || 'no text',
                bannerVoucherCode: window.bannerVoucher?.code || 'no code'
            };
        });
        
        console.log('\nüìã JavaScript –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:');
        console.log(`   bannerInfoBar: ${jsVars.bannerInfoBar}`);
        console.log(`   bannerVoucher: ${jsVars.bannerVoucher}`);
        console.log(`   –¢–µ–∫—Å—Ç bannerInfoBar: ${jsVars.bannerInfoBarText}`);
        console.log(`   –ö–æ–¥ bannerVoucher: ${jsVars.bannerVoucherCode}`);
        
        // –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –±–ª–æ–∫
        const forceShow = await page.evaluate(() => {
            const banners = document.querySelectorAll('[class*="banner"]');
            let shown = 0;
            
            banners.forEach(banner => {
                if (banner.classList.contains('d-none')) {
                    banner.classList.remove('d-none');
                    banner.style.display = 'block';
                    banner.style.visibility = 'visible';
                    shown++;
                }
            });
            
            return shown;
        });
        
        console.log(`\nüìã –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∫–∞–∑–∞–Ω–æ –±–ª–æ–∫–æ–≤: ${forceShow}`);
        
        // –ñ–¥–µ–º –µ—â–µ –Ω–µ–º–Ω–æ–≥–æ –∏ –¥–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
        await page.waitForTimeout(2000);
        await page.screenshot({ path: 'debug_banner.png', fullPage: true });
        console.log('üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ debug_banner.png');
        
        console.log('\n‚úÖ –û—Ç–ª–∞–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
        console.log('üåê –ë—Ä–∞—É–∑–µ—Ä –æ—Å—Ç–∞–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—ã–º –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏...');
        
        // –ù–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Ä—É—á–Ω—É—é
        await new Promise(() => {}); // –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error.message);
    }
}

debugSpecialOfferBlock().catch(console.error);




