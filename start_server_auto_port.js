#!/usr/bin/env node
/**
 * –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä–∞ —Å –≤—ã–±–æ—Ä–æ–º –ø–æ—Ä—Ç–∞
 */

const http = require('http');
const fs = require('fs');
const path = require('path');
const { exec } = require('child_process');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–∞
function checkPort(port) {
    return new Promise((resolve) => {
        const server = http.createServer();
        server.listen(port, () => {
            server.close(() => resolve(true));
        });
        server.on('error', () => resolve(false));
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞
async function findFreePort(startPort = 8000) {
    for (let port = startPort; port < startPort + 100; port++) {
        if (await checkPort(port)) {
            return port;
        }
    }
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç');
}

// –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ —Å–µ—Ä–≤–µ—Ä–∞ (–∫–æ–ø–∏—Ä—É–µ–º –∏–∑ start_server.js)
const mimeTypes = {
    '.html': 'text/html; charset=utf-8',
    '.js': 'application/javascript; charset=utf-8',
    '.json': 'application/json; charset=utf-8',
    '.css': 'text/css; charset=utf-8',
    '.png': 'image/png',
    '.jpg': 'image/jpeg',
    '.jpeg': 'image/jpeg',
    '.gif': 'image/gif',
    '.svg': 'image/svg+xml',
    '.ico': 'image/x-icon',
    '.woff': 'font/woff',
    '.woff2': 'font/woff2',
    '.ttf': 'font/ttf',
    '.eot': 'application/vnd.ms-fontobject'
};

function getMimeType(filePath) {
    const ext = path.extname(filePath).toLowerCase();
    return mimeTypes[ext] || 'application/octet-stream';
}

function serveStaticFile(res, filePath) {
    fs.readFile(filePath, (err, data) => {
        if (err) {
            res.writeHead(404, { 'Content-Type': 'text/plain; charset=utf-8' });
            res.end('–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ' + filePath);
            return;
        }

        const mimeType = getMimeType(filePath);
        res.writeHead(200, { 'Content-Type': mimeType });
        res.end(data);
    });
}

async function startServer() {
    const CONFIGURATOR_PAGE = 'configurator_2508f3617e1046cba5b985f3a7ea393a_page.html';
    
    try {
        // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç
        const port = await findFreePort(8000);
        
        const server = http.createServer((req, res) => {
            res.setHeader('Access-Control-Allow-Origin', '*');
            res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
            res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');

            if (req.method === 'OPTIONS') {
                res.writeHead(200);
                res.end();
                return;
            }

            let filePath = req.url;
            if (filePath.includes('?')) {
                filePath = filePath.split('?')[0];
            }

            if (filePath === '/') {
                filePath = '/' + CONFIGURATOR_PAGE;
            }

            filePath = filePath.substring(1);

            fs.access(filePath, fs.constants.F_OK, (err) => {
                if (err) {
                    res.writeHead(404, { 'Content-Type': 'text/html; charset=utf-8' });
                    res.end(`
                        <!DOCTYPE html>
                        <html>
                        <head>
                            <meta charset="utf-8">
                            <title>–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω</title>
                        </head>
                        <body>
                            <h1>404 - –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω</h1>
                            <p>–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–π —Ñ–∞–π–ª: ${req.url}</p>
                            <p><a href="/">–ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä—É</a></p>
                        </body>
                        </html>
                    `);
                    return;
                }

                serveStaticFile(res, filePath);
            });
        });

        server.listen(port, () => {
            console.log('üöÄ –°–µ—Ä–≤–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä–∞ –∑–∞–ø—É—â–µ–Ω!');
            console.log('');
            console.log('üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:');
            console.log(`   –ü–æ—Ä—Ç: ${port}`);
            console.log(`   URL: http://localhost:${port}`);
            console.log(`   –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä: http://localhost:${port}/${CONFIGURATOR_PAGE}`);
            console.log('');
            console.log('üéØ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:');
            console.log('   ‚úÖ –†—É—Å—Å–∫–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã');
            console.log('   ‚úÖ –í–∞–ª—é—Ç–∞ –≤ —Ä—É–±–ª—è—Ö (‚ÇΩ)');
            console.log('   ‚úÖ –õ–æ–∫–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è');
            console.log('   ‚úÖ –ü–µ—Ä–µ—Ö–≤–∞—Ç API –∑–∞–ø—Ä–æ—Å–æ–≤');
            console.log('');
            console.log('üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C');
            console.log('');

            // –ê–≤—Ç–æ–æ—Ç–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞
            const url = `http://localhost:${port}`;
            const start = process.platform === 'darwin' ? 'open' : 
                          process.platform === 'win32' ? 'start' : 'xdg-open';
            
            exec(`${start} ${url}`, (error) => {
                if (error) {
                    console.log('üí° –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –∞–¥—Ä–µ—Å—É:');
                    console.log(`   ${url}`);
                } else {
                    console.log('üåê –ë—Ä–∞—É–∑–µ—Ä –æ—Ç–∫—Ä—ã—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');
                }
            });
        });

        server.on('error', (err) => {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', err.message);
            process.exit(1);
        });

        process.on('SIGINT', () => {
            console.log('\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...');
            server.close(() => {
                console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
                process.exit(0);
            });
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
        process.exit(1);
    }
}

startServer();




